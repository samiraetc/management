datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(uuid()) @unique
  first_name        String
  last_name         String
  full_name         String
  email             String              @unique
  password          String
  created_at        DateTime            @default(now())
  username          String              @unique
  position          String?
  language          String?
  workspaces        Workspace[]         @relation("workspace-creator")
  teams             Team[]              @relation("team-creator")
  tasks_creator     Tasks[]             @relation("task-creator")
  member_of         WorkspaceMembers[]
  team_member_of    TeamMembers[]
  task_assigned     TaskAssigneds[]
}

model Label {
  id                String              @id @default(uuid())
  name              String              @unique
  color             String
  created_at        DateTime            @default(now())
}

model Workspace {
   id                String              @id @default(uuid()) @unique
  name              String
  created_at        DateTime            @default(now())
  updated_at        DateTime
  creator_id        String
  creator           User                @relation("workspace-creator", fields: [creator_id], references: [id])
  url_key           String              @unique
  members           WorkspaceMembers[]
  labels            WorkspaceLabels[]
  teams             WorkspaceTeams[]
}

model WorkspaceMembers {
  user_id           String
  workspace_id      String
  user              User                @relation(fields: [user_id], references: [id])
  workspace         Workspace           @relation(fields: [workspace_id], references: [id])
  permission        String

  @@id([user_id, workspace_id])
}

model WorkspaceTeams {
  team_id           String
  workspace_id      String
  team              Team                @relation("workspace-teams", fields: [team_id], references: [id])
  workspace         Workspace           @relation(fields: [workspace_id], references: [id])

  @@id([team_id, workspace_id])
}

model WorkspaceLabels {
  id                String              @id @default(uuid()) @unique
  workspace_id      String
  name              String
  color             String
  created_at        DateTime            @default(now())
  workspace         Workspace           @relation(fields: [workspace_id], references: [id])
  can_edit          Boolean

  @@unique([workspace_id, name])
}

model Priority {
  id                String              @id @default(uuid()) @unique
  name              String
  value             Int                 @unique
}

model Estimatives {
  id                String              @id @default(uuid()) @unique
  name              String              @unique
  points            String[]
}

model Team {
  id                String              @id @default(uuid()) @unique
  name              String
  created_at        DateTime            @default(now())
  creator_id        String
  creator           User                @relation("team-creator", fields: [creator_id], references: [id])
  identifier        String
  estimates_type    String?
  workspace_id      String
  workspace         WorkspaceTeams[]    @relation("workspace-teams")
  members           TeamMembers[]
  labels            TeamLabels[]
  task              TeamTasks[]  @relation("team-tasks")

  @@unique([workspace_id, name])
}

model TeamMembers {
  user_id           String
  team_id           String
  user              User                @relation(fields: [user_id], references: [id])
  team              Team                @relation(fields: [team_id], references: [id])
  permission        String

  @@id([user_id, team_id])
}

model TeamLabels {
  id                String              @id @default(uuid()) @unique
  name              String
  color             String
  team_id           String
  team              Team                @relation(fields: [team_id], references: [id])
  can_edit          Boolean
  created_at        DateTime            @default(now())
  label_of          TaskLabels[]

  @@unique([team_id, name])
}

model Tasks {
  id                String              @id @default(uuid()) @unique
  title             String
  description       String?
  priority          Int?
  estimative        Int?
  creator_id        String
  task_number       Int
  status_id         String?
  team_id           String
  url_key           String
  creator           User                @relation("task-creator", fields: [creator_id], references: [id])
  assigned          TaskAssigneds[]
  labels            TaskLabels[]
  team              TeamTasks[]
}

model TaskAssigneds {
  user_id           String
  task_id           String
  user              User                 @relation(fields: [user_id], references: [id])
  task              Tasks                @relation(fields: [task_id], references: [id])

  @@id([user_id, task_id])
}

model TaskLabels {
  team_label_id           String
  task_id           String
  team             TeamLabels                 @relation(fields: [team_label_id], references: [id])
  task              Tasks                @relation(fields: [task_id], references: [id])

  @@id([team_label_id, task_id])
}


model TeamTasks {
  team_id      String
  task_id      String
  team         Team                @relation("team-tasks", fields: [team_id], references: [id])
  task         Tasks           @relation(fields: [task_id], references: [id])

  @@id([team_id, task_id])
}
